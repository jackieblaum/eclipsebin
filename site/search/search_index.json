{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"eclipsebin: \u00b6 A package for non-uniformly binning eclipsing binary star light curves. Overview \u00b6 This Python package provides a specialized binning scheme designed to more effectively capture the features of eclipsing binary star light curves. Unlike traditional uniform binning (middle panel) , which can dilute the crucial details of eclipses, this non-uniform binning method (right panel) prioritizes the accurate representation of eclipse events. While the default parameters of this package are optimized for detached systems, the binning scheme can also be effectively applied to semi-detached and contact systems by adjusting these parameters. Key Features \u00b6 Eclipse-Focused Binning : The binning algorithm identifies the eclipse phases and allocates up to half of the total bins to these critical periods. The remaining bins are distributed across the out-of-eclipse regions. Optimized Data Distribution : Using the pandas qcut function, the package ensures that each bin within the eclipse and out-of-eclipse segments contains approximately the same number of data points, maintaining the integrity of the light curve's structure. Enhanced Accuracy : By concentrating bins around the brief, narrow eclipse phases, the method improves the resolution of these events, which are essential for deriving accurate parameters of the binary system. Why Use This Binning Scheme? \u00b6 Eclipses in binary star systems contain vital information about the system's properties, such as the relative sizes, masses, and orbital parameters of the stars. Standard uniform binning can obscure these details, especially when the eclipse duration is short relative to the orbital period. This package mitigates that issue by adaptively placing more bins where they matter most\u2014during the eclipses\u2014thereby preserving the fidelity of the light curve and improving the subsequent analysis. How it Works \u00b6 Eclipse Detection : The package first identifies the primary and secondary eclipse phases. The primary eclipse is located by finding the minimum flux, and the secondary eclipse is located by finding the minimum flux at least 0.2 phase units away from the primary eclipse. Eclipse Boundaries : The package defines the boundaries of the eclipses as the points where the flux returns to 1.0 flux units, or the closest point to 1.0 flux units if the flux does not return to 1.0. Bin Groups : The package then groups the data into four segments: the two eclipse regions and the two out-of-eclipse regions. A specified fraction of the total number of bins is split between the eclipse regions, and the remaining bins are split evenly between the out-of-eclipse regions. Binning : The package then uses the pandas qcut function within each group to bin the data into a specified number of bins. This function bins the data such that there are an approximately equal number of points within each bin for the given group. Plotting : The package also provides a function to plot the binned and unbinned light curves, marking the eclipse boundaries with vertical lines. Light Curve Requirements \u00b6 At least 10 flux measurements with associated uncertainties, covering both eclipses and out-of-eclipse regions. Primary and secondary eclipses must be distinguishable by identifying the minimum flux values. The secondary eclipse minimum must occur at least 0.2 in phase away from the primary eclipse minimum. A future version will allow this value to be specified as a keyword argument. The minimum flux value across the light curve, outside the 0.4 phase region around the primary eclipse, must belong to the secondary eclipse. Fluxes should ideally be normalized so that out-of-eclipse regions have a flux value close to 1. Two eclipses must be present in the light curve. A future version will support binning for light curves with only one eclipse. Optional: If the binning scheme is not producing the desired result, ensure that the eclipses do not cross the phase boundary. Getting Started \u00b6 To start using the package, install it via pip: pip install eclipsebin Usage \u00b6 import eclipsebin as ebin # Example usage binner = ebin.EclipsingBinaryBinner ( phases, fluxes, fluxerrs, nbins = 200 , fraction_in_eclipse = 0 .5, atol_primary = 0 .001, atol_secondary = 0 .05 ) bin_centers, bin_means, bin_stds = binner.bin_light_curve ( plot = True ) Contributing \u00b6 Contributions are welcome! Please refer to the Contributing Guide for guidelines on how to help improve this project. License \u00b6 This project is licensed under the MIT License - see the LICENSE file for details. Acknowledgments \u00b6 This material is based upon work supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. 2206744 & DGE 2146752. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.","title":"Home"},{"location":"#eclipsebin","text":"A package for non-uniformly binning eclipsing binary star light curves.","title":"eclipsebin:"},{"location":"#overview","text":"This Python package provides a specialized binning scheme designed to more effectively capture the features of eclipsing binary star light curves. Unlike traditional uniform binning (middle panel) , which can dilute the crucial details of eclipses, this non-uniform binning method (right panel) prioritizes the accurate representation of eclipse events. While the default parameters of this package are optimized for detached systems, the binning scheme can also be effectively applied to semi-detached and contact systems by adjusting these parameters.","title":"Overview"},{"location":"#key-features","text":"Eclipse-Focused Binning : The binning algorithm identifies the eclipse phases and allocates up to half of the total bins to these critical periods. The remaining bins are distributed across the out-of-eclipse regions. Optimized Data Distribution : Using the pandas qcut function, the package ensures that each bin within the eclipse and out-of-eclipse segments contains approximately the same number of data points, maintaining the integrity of the light curve's structure. Enhanced Accuracy : By concentrating bins around the brief, narrow eclipse phases, the method improves the resolution of these events, which are essential for deriving accurate parameters of the binary system.","title":"Key Features"},{"location":"#why-use-this-binning-scheme","text":"Eclipses in binary star systems contain vital information about the system's properties, such as the relative sizes, masses, and orbital parameters of the stars. Standard uniform binning can obscure these details, especially when the eclipse duration is short relative to the orbital period. This package mitigates that issue by adaptively placing more bins where they matter most\u2014during the eclipses\u2014thereby preserving the fidelity of the light curve and improving the subsequent analysis.","title":"Why Use This Binning Scheme?"},{"location":"#how-it-works","text":"Eclipse Detection : The package first identifies the primary and secondary eclipse phases. The primary eclipse is located by finding the minimum flux, and the secondary eclipse is located by finding the minimum flux at least 0.2 phase units away from the primary eclipse. Eclipse Boundaries : The package defines the boundaries of the eclipses as the points where the flux returns to 1.0 flux units, or the closest point to 1.0 flux units if the flux does not return to 1.0. Bin Groups : The package then groups the data into four segments: the two eclipse regions and the two out-of-eclipse regions. A specified fraction of the total number of bins is split between the eclipse regions, and the remaining bins are split evenly between the out-of-eclipse regions. Binning : The package then uses the pandas qcut function within each group to bin the data into a specified number of bins. This function bins the data such that there are an approximately equal number of points within each bin for the given group. Plotting : The package also provides a function to plot the binned and unbinned light curves, marking the eclipse boundaries with vertical lines.","title":"How it Works"},{"location":"#light-curve-requirements","text":"At least 10 flux measurements with associated uncertainties, covering both eclipses and out-of-eclipse regions. Primary and secondary eclipses must be distinguishable by identifying the minimum flux values. The secondary eclipse minimum must occur at least 0.2 in phase away from the primary eclipse minimum. A future version will allow this value to be specified as a keyword argument. The minimum flux value across the light curve, outside the 0.4 phase region around the primary eclipse, must belong to the secondary eclipse. Fluxes should ideally be normalized so that out-of-eclipse regions have a flux value close to 1. Two eclipses must be present in the light curve. A future version will support binning for light curves with only one eclipse. Optional: If the binning scheme is not producing the desired result, ensure that the eclipses do not cross the phase boundary.","title":"Light Curve Requirements"},{"location":"#getting-started","text":"To start using the package, install it via pip: pip install eclipsebin","title":"Getting Started"},{"location":"#usage","text":"import eclipsebin as ebin # Example usage binner = ebin.EclipsingBinaryBinner ( phases, fluxes, fluxerrs, nbins = 200 , fraction_in_eclipse = 0 .5, atol_primary = 0 .001, atol_secondary = 0 .05 ) bin_centers, bin_means, bin_stds = binner.bin_light_curve ( plot = True )","title":"Usage"},{"location":"#contributing","text":"Contributions are welcome! Please refer to the Contributing Guide for guidelines on how to help improve this project.","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"License"},{"location":"#acknowledgments","text":"This material is based upon work supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. 2206744 & DGE 2146752. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.","title":"Acknowledgments"},{"location":"api-reference/","text":"","title":"Api reference"},{"location":"binning-scheme/","text":"How the Binning Scheme Works \u00b6 Overview \u00b6 This binning scheme divides an eclipsing binary light curve into four segments: two eclipse regions and two out-of-eclipse regions. The user can specify the fraction of the total bins nbins that should be placed within the eclipse regions, fraction_within_eclipse . Within each segment of the light curve, bins are chosen such that an approximately equal number of data points fall within each bin. Consider the following light curve as an example. In all cases, the code assumes that the light curve has been normalized such that the out-of-eclipse flux is close to one. Eclipse Detection \u00b6 Eclipse minima \u00b6 Primary eclipse minimum: This code assumes that the overall minimum flux value of the light curve falls within the primary eclipse (it's okay if this isn't the true minimum of the primary eclipse). Secondary eclipse minimum: To find the secondary eclipse, the code searches the section of the light curve falling at least 0.2 in phase in either direction. The minimum flux value within this section is taken to be the secondary eclipse minimum (again, it's only necessary that this minimum falls within the secondary eclipse). Eclipse ingress and egress \u00b6 Ingress: To find the approximate location of the start of the eclipse, the code examines the phases prior to that of the eclipse minimum found in the previous step. Given the absolute tolerance atol_primary or atol_secondary , which may be specified by the user, the code selects the greatest phase for which the flux is close to one within the selected region. Egress: Same thing, except in the other direction. Let's take a look at the primary eclipse detection for our example light curve. In this case, atol=0.01 . Binning \u00b6 Bin distribution \u00b6 Given the desired number of total bins nbins , the code determines the number of bins that will fall within each of the four segments of the light curve. The code first delegates bins to the eclipse regions. The number of bins to place within the eclipse regions is determined by multiplying fraction_within_eclipse by nbins . The bins are then divided equally between the two eclipses (with the primary holding an additional bin in the case of an odd number). In the case that there are more desired bins than data points falling within an eclipse region, the number of bins is reduced to equal that number of data points. The remainder of the bins are divided equally within the out-of-eclipse regions. Let's say we want to bin our example light curve with nbins=200 and fraction_within_eclipse=0.7 . These inputs indicate that the code should give us 200*0.7=140 bins within the two eclipses, or 140/2=70 bins per eclipse. The remaining 200-140=60 bins will be split between the two out-of-eclipse-regions. Binning within each segment \u00b6 Once the bin distribution has been calculated, pandas.qcut() applies a quantile-based discretization function to calculate bin edges such that an approximately equal number of data points fall within each phase bin. This choice of binning helps to retain important features of the light curve while maintaining a specified number of bins. Phase shift \u00b6 To avoid having a bin that wraps around phase 1, the code slightly shifts the phase data and bin edges after binning such that the rightmost bin edge is moved to 1. Here is our light curve example after binning. The difference between the dashed gray lines (eclipse boundaries pre-shift) and orange lines (eclipse boundaries post-shift) indicates the magnitude of this phase shift. For comparison, here is the result of using standard uniform binning techniques:","title":"Binning Scheme"},{"location":"binning-scheme/#how-the-binning-scheme-works","text":"","title":"How the Binning Scheme Works"},{"location":"binning-scheme/#overview","text":"This binning scheme divides an eclipsing binary light curve into four segments: two eclipse regions and two out-of-eclipse regions. The user can specify the fraction of the total bins nbins that should be placed within the eclipse regions, fraction_within_eclipse . Within each segment of the light curve, bins are chosen such that an approximately equal number of data points fall within each bin. Consider the following light curve as an example. In all cases, the code assumes that the light curve has been normalized such that the out-of-eclipse flux is close to one.","title":"Overview"},{"location":"binning-scheme/#eclipse-detection","text":"","title":"Eclipse Detection"},{"location":"binning-scheme/#eclipse-minima","text":"Primary eclipse minimum: This code assumes that the overall minimum flux value of the light curve falls within the primary eclipse (it's okay if this isn't the true minimum of the primary eclipse). Secondary eclipse minimum: To find the secondary eclipse, the code searches the section of the light curve falling at least 0.2 in phase in either direction. The minimum flux value within this section is taken to be the secondary eclipse minimum (again, it's only necessary that this minimum falls within the secondary eclipse).","title":"Eclipse minima"},{"location":"binning-scheme/#eclipse-ingress-and-egress","text":"Ingress: To find the approximate location of the start of the eclipse, the code examines the phases prior to that of the eclipse minimum found in the previous step. Given the absolute tolerance atol_primary or atol_secondary , which may be specified by the user, the code selects the greatest phase for which the flux is close to one within the selected region. Egress: Same thing, except in the other direction. Let's take a look at the primary eclipse detection for our example light curve. In this case, atol=0.01 .","title":"Eclipse ingress and egress"},{"location":"binning-scheme/#binning","text":"","title":"Binning"},{"location":"binning-scheme/#bin-distribution","text":"Given the desired number of total bins nbins , the code determines the number of bins that will fall within each of the four segments of the light curve. The code first delegates bins to the eclipse regions. The number of bins to place within the eclipse regions is determined by multiplying fraction_within_eclipse by nbins . The bins are then divided equally between the two eclipses (with the primary holding an additional bin in the case of an odd number). In the case that there are more desired bins than data points falling within an eclipse region, the number of bins is reduced to equal that number of data points. The remainder of the bins are divided equally within the out-of-eclipse regions. Let's say we want to bin our example light curve with nbins=200 and fraction_within_eclipse=0.7 . These inputs indicate that the code should give us 200*0.7=140 bins within the two eclipses, or 140/2=70 bins per eclipse. The remaining 200-140=60 bins will be split between the two out-of-eclipse-regions.","title":"Bin distribution"},{"location":"binning-scheme/#binning-within-each-segment","text":"Once the bin distribution has been calculated, pandas.qcut() applies a quantile-based discretization function to calculate bin edges such that an approximately equal number of data points fall within each phase bin. This choice of binning helps to retain important features of the light curve while maintaining a specified number of bins.","title":"Binning within each segment"},{"location":"binning-scheme/#phase-shift","text":"To avoid having a bin that wraps around phase 1, the code slightly shifts the phase data and bin edges after binning such that the rightmost bin edge is moved to 1. Here is our light curve example after binning. The difference between the dashed gray lines (eclipse boundaries pre-shift) and orange lines (eclipse boundaries post-shift) indicates the magnitude of this phase shift. For comparison, here is the result of using standard uniform binning techniques:","title":"Phase shift"},{"location":"getting-started/","text":"Installation \u00b6 Install the package using pip : pip install eclipsebin Prepare your Light Curve \u00b6 Phase your light curve. Phases must fall between 0 and 1. Convert magnitude to flux. Normalize the fluxes. The out-of-eclipse normalized flux should be close to 1. Create an EclipsingBinaryBinner Object \u00b6 Assuming you already have your phases, fluxes, and flux uncertainties stored as phases , fluxes , and fluxerrs , respectively, initialize your EclipsingBinaryBinner : import eclipsebin as ebin # Example usage binner = ebin.EclipsingBinaryBinner ( phases, fluxes, fluxerrs, nbins = 200 , fraction_in_eclipse = 0 .5, atol_primary = 0 .001, atol_secondary = 0 .05 ) Here nbins indicates the desired total number of bins, and fraction_in_eclipse indicates the fraction of that total number of bins that you wish to place within the eclipse regions. You can also optionally set atol_primary and/or atol_secondary , which specify the absolute tolerance of the corresponding eclipse ingress and egress regarding their proximity to one. These arguments are typically only necessary for systems with significant ellipsoidal variations, as the out-of-eclipse regions are more variable. By default, these values are calculated within the code by taking proximity_to_one * 0.05 , where proximity_to_one indicates the distance of the corresponding eclipse minimum* from unity. *Note that this is a rough approximation and may be inaccurate for some light curves. See Binning Scheme for more details. Now just call one simple function to bin your light curve, and plot it if you wish. bin_centers, bin_means, bin_stds = binner.bin_light_curve ( plot = True ) And voila, you have your binned light curve! Do with it as you wish.","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install the package using pip : pip install eclipsebin","title":"Installation"},{"location":"getting-started/#prepare-your-light-curve","text":"Phase your light curve. Phases must fall between 0 and 1. Convert magnitude to flux. Normalize the fluxes. The out-of-eclipse normalized flux should be close to 1.","title":"Prepare your Light Curve"},{"location":"getting-started/#create-an-eclipsingbinarybinner-object","text":"Assuming you already have your phases, fluxes, and flux uncertainties stored as phases , fluxes , and fluxerrs , respectively, initialize your EclipsingBinaryBinner : import eclipsebin as ebin # Example usage binner = ebin.EclipsingBinaryBinner ( phases, fluxes, fluxerrs, nbins = 200 , fraction_in_eclipse = 0 .5, atol_primary = 0 .001, atol_secondary = 0 .05 ) Here nbins indicates the desired total number of bins, and fraction_in_eclipse indicates the fraction of that total number of bins that you wish to place within the eclipse regions. You can also optionally set atol_primary and/or atol_secondary , which specify the absolute tolerance of the corresponding eclipse ingress and egress regarding their proximity to one. These arguments are typically only necessary for systems with significant ellipsoidal variations, as the out-of-eclipse regions are more variable. By default, these values are calculated within the code by taking proximity_to_one * 0.05 , where proximity_to_one indicates the distance of the corresponding eclipse minimum* from unity. *Note that this is a rough approximation and may be inaccurate for some light curves. See Binning Scheme for more details. Now just call one simple function to bin your light curve, and plot it if you wish. bin_centers, bin_means, bin_stds = binner.bin_light_curve ( plot = True ) And voila, you have your binned light curve! Do with it as you wish.","title":"Create an EclipsingBinaryBinner Object"}]}